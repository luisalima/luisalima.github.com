<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My path to enlightnment]]></title>
  <link href="http://luisalima.github.com/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2012-12-13T11:12:58+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding automatic code reloading to rails console]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console/"/>
    <updated>2012-12-13T10:56:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console</id>
    <content type="html"><![CDATA[<p>So I have no idea why the rails console in development mode doesn&#8217;t already do this, since the whole idea of the console in development mode is for us to mess around and test random stuff in development mode, right? Anyway, I got inspired and helped by <a href="http://jkfill.com/">Jkfill</a> with his post on <a href="http://jkfill.com/2012/12/08/automatic-code-reloading-in-rails-console">Automatic Code Reloading in Rails Console</a>, so here goes, more for my records than yours since you should follow the instructions in his post. I am using Rails 3.2.9, so I had to copy the code from the <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/console/app.rb#L25">reload! method in the rails console code</a>, which is not exactly the best practice, but it&#8217;s just for dev mode and it works :-)</p>

<pre><code> #this should be in config/initializers/irb_reloading.rb
    if defined?(IRB::Context) && !defined?(Rails::Server) && Rails.env.development?

  class IRB::Context
    def evaluate_with_reloading(line, line_no)

        ActionDispatch::Reloader.cleanup!
      ActionDispatch::Reloader.prepare!
      evaluate_without_reloading(line, line_no)
    end
    alias_method_chain :evaluate, :reloading
  end

  puts "=> IRB code reloading enabled"
end
</pre>


<p></code></p>

<p>In the meanwhile, shortly browsed the code at <a href="https://github.com/rails">the Rails gihub project</a> and it&#8217;s really a nice way to learn more about rails&#8230; must do it more often.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silencing nagging logs in rails]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/disabling-nagging-logs-in-rails/"/>
    <updated>2012-12-13T10:20:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/disabling-nagging-logs-in-rails</id>
    <content type="html"><![CDATA[<p>Once upon a time, I was trying to do some meaningful debugging in rails with</p>

<pre><code> logger.debug </pre>


<p></code></p>

<p>and I was being particularly nagged by these annoying messages from Webrick:</p>

<pre><code> WARN Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true [closed]
</pre>


<p></code></p>

<p>The way to solve this? I am using &#8216;thin&#8217; instead of Webrick as a development server (yeah, I know that there are <a href="https://bugs.ruby-lang.org/attachments/2300/204_304_keep_alive.patch">patches to solve this in Webrick</a> but I decided to go a bit aggressive instead).</p>

<p>And another thing that nagged me were the asset pipeline messages with the gets for the css, js, images, etc. So one way to shut Sprockets up is given <a href="http://stackoverflow.com/questions/6312448/how-to-disable-logging-of-asset-pipeline-sprockets-messages-in-rails-3-1">here</a>, and just for the record:</p>

<pre><code> # place this code in config/initializers/quiet_assets.rb
    if Rails.env.development?
  Rails.application.assets.logger = Logger.new('/dev/null')
  Rails::Rack::Logger.class_eval do
    def call_with_quiet_assets(env)
      previous_level = Rails.logger.level
      Rails.logger.level = Logger::ERROR if env['PATH_INFO'] =~ %r{^/assets/}
      call_without_quiet_assets(env)
    ensure
      Rails.logger.level = previous_level
    end
    alias_method_chain :call, :quiet_assets
  end
end
</pre>


<p></code></p>

<p>Ahhhhh now I can actually see <strong>meaningful</strong> logs in my development log. <em>whew!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Octopress blog...]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/new-post/"/>
    <updated>2012-12-13T09:56:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/new-post</id>
    <content type="html"><![CDATA[<p>I created this blog specifically to jot down notes of interesting / useful / meaningful stuff I find during my adventures with development, which I hope are useful to others.</p>

<p>And to start with, here is a link to a post that really helped me out <a href="http://code.dblock.org/Octopress-setting-up-a-blog-and-contributing-to-an-existing-one">Octopress: Setting up a Blog and Contributing to an Existing One</a>. It wasn&#8217;t really clear to me from Octopress instructions that I had to run rake generate and rake deploy; I was just trying to make the git commits and push by hand (and becoming really frustrated by it). So, just for my own reference:</p>

<pre><code> # do stuff in your blog, like rake new_post
    # then generate the blog
    rake generate
    # then save the source branch and push it to Github
    git add .
    git commit -m "whatever message"
    git push origin source
    # and now, this is where the magic happens! this takes care
    # of pushing everything automagically onto the master branch!
    rake deploy
</code></pre>


<p>(depending on your system, you might need to run bundle exec followed by the rake commands).</p>

<p>Oh, and also&#8230; to delete a post, delete it only from <pre><code>blog-root/source/_posts/post-title</code></pre> and then run the commands above again. The rake tasks from Octopress take care of everything.</p>

<p>This cool minimalistic theme is from <a href="http://zespia.tw">zespia.tw</a>, and it&#8217;s called <a href="http://zespia.tw/Octopress-Theme-Slash/">Slash</a>.</p>

<p>Ta-da!</p>

<p>So far I&#8217;m really enjoying Octopress &#8211; I chose it because I want to be able to do everything from the shell, and never leave my dev environment and my beloved ST2/emacs combination.</p>
]]></content>
  </entry>
  
</feed>
