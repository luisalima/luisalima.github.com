<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails_tips | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/rails-tips/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2012-12-19T10:09:58+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails tip #2 - less Rspec in more color]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color/"/>
    <updated>2012-12-14T11:04:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color</id>
    <content type="html"><![CDATA[<p>I usually have Guard running in the background with Spork, but when I'm writing tests I like to do it the old fashioned way and be able to do rspec some_test | less. The problem with that approach is that we get a monochrome version of our tests. In order to redirect the color in the pipe, edit spec_helper and add the following:</p>

<pre><code> # spec/spec_helper.rb
Rspec.configure do |config|
    config.tty = true
    config.color_enabled = true
    # ... whatever configurations you might have here...
end
</code></pre>


<p>And enjoy a more colorful life ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails tip #1 - environment variables]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables/"/>
    <updated>2012-12-14T10:24:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables</id>
    <content type="html"><![CDATA[<p>This isn't exactly my tip (well, since this is a learning / work in progress blog, none of them are), but when an article is already as comprehensive as this one, there's nothing left to say except:</p>

<p><a href="http://railsapps.github.com/rails-environment-variables.html">Here's a very nice article on the options for setting environment variables in Rails</a></p>

<p>Why would you want to set environment variables in rails? There are some examples in the article, but for instance, setting passwords to access services. They should not be in any file (nor tracked in git), so that other people cannot access them. One way is to set Unix environment variables, the other way -- which actually sounds like a "cleaner way" of organizing things -- is to set them from Rails itself by taking the values from a yaml file.</p>
]]></content>
  </entry>
  
</feed>
