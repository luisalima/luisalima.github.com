<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: factory_girl | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/factory-girl/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2013-01-07T09:31:09+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Random notes on Factory Girl Part II]]></title>
    <link href="http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl-part-ii/"/>
    <updated>2013-01-04T20:25:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl-part-ii</id>
    <content type="html"><![CDATA[<p>More random/tutorialish aspects of my usage of the FactoryGirl gem. I do advise you to read their <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">getting started guide</a>, it helps a lot. This is more of a reference of the things I found most useful. If you have any questions/corrections/observations, let me know in the comments.</p>

<h2>FactoryGirl and Polymorphic named associations</h2>

<p>If you have polymorphic associations with different names, here's how to go about it in factories:</p>

<pre><code> factory :category, aliases: [:category_one, :category_two] </code></pre>


<p>There are other approaches to this problem <a href="http://stackoverflow.com/questions/7747945/factorygirl-and-polymorphic-associations">here</a>, but I find this one to be the simplest and so far it hasn't gotten me into trouble (perhaps yet :-) ).</p>

<h2>Attributes_for</h2>

<p>This is probably very obvious, but I find it useful to use attributes_for from FactoryGirl to build the valid attributes for use in controller specs.</p>

<pre><code> def valid_attributes
    FactoryGirl.attributes_for(:my_model)
    end
</code></pre>


<p>One thing that is useful to know is that attributes_for ignores associations, and thus does not include attributes that are related to associations even if you have an association in the factory. <a href="http://stackoverflow.com/questions/10290286/factorygirl-why-does-attributes-for-omit-some-attributes">Here is a post at stackoverflow</a> that provides you with the foreign keys in the attributes if you need them.</p>

<h2>Has_and_belongs_to_many associations</h2>

<p>I'm just adding this for my own reference. It's in the <a href="https://github.com/thoughtbot/factory_girl/wiki/Usage">FactoryGirl getting started wiki</a>.</p>

<pre><code> FactoryGirl.define do
  factory :person do
    first_name { 'James' }
    books {
      Array(5..10).sample.times.map do
        FactoryGirl.create(:book) # optionally add traits: FactoryGirl.create(:book, :book_description)
      end
    }
  end
end
</code></pre>


<p>There is more in FactoryGirl associations <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">here</a>.</p>

<h2>DRYing up: Traits</h2>

<p>I just discovered traits, which are ways to add state to a factory (read: create factories whose attributes have different values without having to go through aliases). I am <a href="http://robots.thoughtbot.com/post/23673635798/remove-duplication-with-factorygirls-traits">shamelessly copying Thoughtbot's example</a> because I think it's the clearest one to have here for your reference:</p>

<pre><code> FactoryGirl.define do
  factory :todo_item do
    name 'Pick up a gallon of milk'

    trait :completed do
      complete true
    end

    trait :not_completed do
      complete false
    end
  end
end
</code></pre>


<h2>DRYing up: inheritance</h2>

<p>Something that I wasn't making much use of -- you can nest factories, which allows you to create multiple factories for the same class without repeating common attributes:</p>

<pre><code>
factory :user do
    name "testing"

  factory :super_user do
    super_powers true
  end
end
</code></pre>


<h2>Tracking factories</h2>

<p>I followed the advice <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#activesupport-instrumentation">here</a> to track factories. I think it's useful to know how factories are being used.</p>

<h2>If you want to go really in depth...</h2>

<p>You have a <a href="http://www.arailsdemo.com/posts/39">very nice post on code reading of the factorygirl gem here</a>. You can even learn something about how to do cool stuff in ruby/rails like:</p>

<pre><code> def set(attribute, value)
    @instance.send(:"#{attribute}=", value)
  end
</code></pre>


<p>And that's all, folks (for now...)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random pseudo-tutorialish notes on Factory Girl, part I]]></title>
    <link href="http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl/"/>
    <updated>2013-01-04T18:39:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl</id>
    <content type="html"><![CDATA[<p>The guys at Thoughtbot do an excellent job. I especially love shoulda and high_voltage. I have a love/hate relationship with factory_girl, so I decided to write this post trying to detail some of the ways I've been using it. Maybe it will help someone. Hope it does!</p>

<p>First of all, what is a factory and what do you need it for? Factories are a (healthier) alternative to fixtures, and fixtures are simply a "fixed state" for models, used as baseline for tests. In Rails, fixtures get automatically loaded into the test database before tests are run, and you define them in a YAML file. However, they can become awkward pretty easily, so Factories were created -- frameworks designed to allow a quick creation of fully featured objects for testing.</p>

<p>And now you ask, why don't we just create the object directly before each test? Think required attributes and associations -- if your model has 10 attributes and 5 different associations you might want to have somewhere where you can create valid instances of that model upfront and then reuse them.</p>

<p>So, we have (somewhat) established what factories are for. <a href="http://blog.steveklabnik.com/posts/2012-07-14-why-i-don-t-like-factory_girl">Just beware of the downsides of using factories</a> (quoting the blog in the link, which is highly recommended):
"A big feature of tests is to give you feedback on your code. Tests and code have a symbiotic relationship. Your tests inform your code. If a test is complicated, your code is complicated. Ultimately, because tests are a client of your code, you can see how easy or hard your code's interfaces are."</p>

<p>Yup, I feel your pain, bro. My latest project has tons of models, polymorphic interfaces, STI's, etc. Ultimately, flexibility creates complexity, and it's better to avoid extra features to keep simplicity. But I digress.</p>

<p>So, how do we use these lil' bastards? :-)</p>

<h2>Configuration</h2>

<p>The <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">Getting started</a> guide provides what you need. Except... I don't think it's that clear that if you are using Rspec, those lines</p>

<pre><code>
    require 'factory_girl'
    FactoryGirl.find_definitions
</code></pre>


<p>go in the spec_helper.rb file. More precisely, <em>FactoryGirl.find_definitions</em> goes inside the <em>RSpec.configure do |config|</em> block.</p>

<p><em>But:</em> if you are using Spork, you need to reload Factory definitions at each run, otherwise you get a "factory not registered" error. So, place the following inside the <em>Spork.each_run do</em> block:</p>

<pre><code>
    Spork.each_run do
    # ....
        FactoryGirl.definition_file_paths << File.join(File.dirname(__FILE__), 'factories')
      FactoryGirl.find_definitions
    # etc...
</code></pre>


<p>There you go! Everything nicely configured :-) Also, you can use FactoryGirl in rails console! Just use the code <a href="http://blog.thefrontiergroup.com.au/2011/03/reloading-factory-girl-factories-in-the-rails-3-console/">in this post</a>, which I'll shamelessly copy here for posterity and for my own reference:</p>

<pre><code>
    ActionDispatch::Callbacks.after do
      # Reload the factories
      return unless (Rails.env.development? || Rails.env.test?)

      unless FactoryGirl.factories.blank? # first init will load factories, this should only run on subsequent reloads
        FactoryGirl.factories.clear
        FactoryGirl.find_definitions
      end
    end
</code></pre>


<p>You can also just run this code directly in the console. If you do have sequences defined, you'll need to add the following extra:</p>

<pre><code>
FactoryGirl.factories.clear
FactoryGirl.sequences.clear
FactoryGirl.find_definitions
</code></pre>


<p>(and if you are using <a href="http://robots.thoughtbot.com/post/23673635798/remove-duplication-with-factorygirls-traits">traits</a>, apparently you need to add FactoryGirl.traits.clear as well).</p>

<h2>In unit testing</h2>

<p>So first things first... You can have a file for testing factories but I'd rather have the test for the validity of the factory in the model test file itself -- this to avoid incurring errors when you are focusing on testing a particular model, all because your factory was ill-defined. So go ahead and test the factory itself:</p>

<pre><code>
    it "has a valid factory" do
        m = FactoryGirl.build(:my_model)
        m.should be_valid
    end
</code></pre>


<p>What do we do if this goes wrong and we can't sort out the error? Go to the console, write</p>

<pre><code>
m = FactoryGirl.build(:my_model)
m.valid?  # duh, it'll be false
m.save    # just to trigger all validations callbacks etc that we might have
m.errors
</code></pre>


<p>And now go ahead and complete your factory with the necessary information. Simple enough, right? The syntax for defining factories is explained pretty well <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">in the starting guide</a> so I won't go to the trouble, except for the case when we are using Faker.</p>

<h2>With Faker</h2>

<p>Faker is a cool gem for... you guessed it, generating fake data. And here's how you do it:</p>

<pre><code>
  factory :company do
    name { Faker::Company.name }
    phone {Faker::PhoneNumber.cell_phone}
  end
</code></pre>


<p>Yup, just a normal block, not too bad.</p>

<h2>Sequences</h2>

<p>Sequences are used for attributes that must be unique, such as email addresses. You can define sequences "outside" of the factory definition, or inside as a block:</p>

<pre><code>
  sequence :email do |n|
    "test#{n}@example.com"
  end

    factory :user do
        email
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    end
</code></pre>


<p>is the same as:</p>

<pre><code>
    factory :user do
        sequence(:email) { |n| "test#{n}@example.com"}
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    end
</code></pre>


<h2>Associations</h2>

<p>Associations in factories are simply created by adding the factory name for the association in the other factory block. For example, if my user has_one location:</p>

<pre><code>
    factory :user do
        sequence(:email) { |n| "test#{n}@example.com"}
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    location   # ta-da!
    end
</code></pre>


<p>More detail about associations with FactoryGirl <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">here</a>.</p>

<p>More about this tomorrow!</p>
]]></content>
  </entry>
  
</feed>
