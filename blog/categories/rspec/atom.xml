<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2013-01-07T09:31:09+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Random notes on Factory Girl Part II]]></title>
    <link href="http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl-part-ii/"/>
    <updated>2013-01-04T20:25:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl-part-ii</id>
    <content type="html"><![CDATA[<p>More random/tutorialish aspects of my usage of the FactoryGirl gem. I do advise you to read their <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">getting started guide</a>, it helps a lot. This is more of a reference of the things I found most useful. If you have any questions/corrections/observations, let me know in the comments.</p>

<h2>FactoryGirl and Polymorphic named associations</h2>

<p>If you have polymorphic associations with different names, here's how to go about it in factories:</p>

<pre><code> factory :category, aliases: [:category_one, :category_two] </code></pre>


<p>There are other approaches to this problem <a href="http://stackoverflow.com/questions/7747945/factorygirl-and-polymorphic-associations">here</a>, but I find this one to be the simplest and so far it hasn't gotten me into trouble (perhaps yet :-) ).</p>

<h2>Attributes_for</h2>

<p>This is probably very obvious, but I find it useful to use attributes_for from FactoryGirl to build the valid attributes for use in controller specs.</p>

<pre><code> def valid_attributes
    FactoryGirl.attributes_for(:my_model)
    end
</code></pre>


<p>One thing that is useful to know is that attributes_for ignores associations, and thus does not include attributes that are related to associations even if you have an association in the factory. <a href="http://stackoverflow.com/questions/10290286/factorygirl-why-does-attributes-for-omit-some-attributes">Here is a post at stackoverflow</a> that provides you with the foreign keys in the attributes if you need them.</p>

<h2>Has_and_belongs_to_many associations</h2>

<p>I'm just adding this for my own reference. It's in the <a href="https://github.com/thoughtbot/factory_girl/wiki/Usage">FactoryGirl getting started wiki</a>.</p>

<pre><code> FactoryGirl.define do
  factory :person do
    first_name { 'James' }
    books {
      Array(5..10).sample.times.map do
        FactoryGirl.create(:book) # optionally add traits: FactoryGirl.create(:book, :book_description)
      end
    }
  end
end
</code></pre>


<p>There is more in FactoryGirl associations <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">here</a>.</p>

<h2>DRYing up: Traits</h2>

<p>I just discovered traits, which are ways to add state to a factory (read: create factories whose attributes have different values without having to go through aliases). I am <a href="http://robots.thoughtbot.com/post/23673635798/remove-duplication-with-factorygirls-traits">shamelessly copying Thoughtbot's example</a> because I think it's the clearest one to have here for your reference:</p>

<pre><code> FactoryGirl.define do
  factory :todo_item do
    name 'Pick up a gallon of milk'

    trait :completed do
      complete true
    end

    trait :not_completed do
      complete false
    end
  end
end
</code></pre>


<h2>DRYing up: inheritance</h2>

<p>Something that I wasn't making much use of -- you can nest factories, which allows you to create multiple factories for the same class without repeating common attributes:</p>

<pre><code>
factory :user do
    name "testing"

  factory :super_user do
    super_powers true
  end
end
</code></pre>


<h2>Tracking factories</h2>

<p>I followed the advice <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#activesupport-instrumentation">here</a> to track factories. I think it's useful to know how factories are being used.</p>

<h2>If you want to go really in depth...</h2>

<p>You have a <a href="http://www.arailsdemo.com/posts/39">very nice post on code reading of the factorygirl gem here</a>. You can even learn something about how to do cool stuff in ruby/rails like:</p>

<pre><code> def set(attribute, value)
    @instance.send(:"#{attribute}=", value)
  end
</code></pre>


<p>And that's all, folks (for now...)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random pseudo-tutorialish notes on Factory Girl, part I]]></title>
    <link href="http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl/"/>
    <updated>2013-01-04T18:39:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2013/01/04/random-notes-on-factory-girl</id>
    <content type="html"><![CDATA[<p>The guys at Thoughtbot do an excellent job. I especially love shoulda and high_voltage. I have a love/hate relationship with factory_girl, so I decided to write this post trying to detail some of the ways I've been using it. Maybe it will help someone. Hope it does!</p>

<p>First of all, what is a factory and what do you need it for? Factories are a (healthier) alternative to fixtures, and fixtures are simply a "fixed state" for models, used as baseline for tests. In Rails, fixtures get automatically loaded into the test database before tests are run, and you define them in a YAML file. However, they can become awkward pretty easily, so Factories were created -- frameworks designed to allow a quick creation of fully featured objects for testing.</p>

<p>And now you ask, why don't we just create the object directly before each test? Think required attributes and associations -- if your model has 10 attributes and 5 different associations you might want to have somewhere where you can create valid instances of that model upfront and then reuse them.</p>

<p>So, we have (somewhat) established what factories are for. <a href="http://blog.steveklabnik.com/posts/2012-07-14-why-i-don-t-like-factory_girl">Just beware of the downsides of using factories</a> (quoting the blog in the link, which is highly recommended):
"A big feature of tests is to give you feedback on your code. Tests and code have a symbiotic relationship. Your tests inform your code. If a test is complicated, your code is complicated. Ultimately, because tests are a client of your code, you can see how easy or hard your code's interfaces are."</p>

<p>Yup, I feel your pain, bro. My latest project has tons of models, polymorphic interfaces, STI's, etc. Ultimately, flexibility creates complexity, and it's better to avoid extra features to keep simplicity. But I digress.</p>

<p>So, how do we use these lil' bastards? :-)</p>

<h2>Configuration</h2>

<p>The <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">Getting started</a> guide provides what you need. Except... I don't think it's that clear that if you are using Rspec, those lines</p>

<pre><code>
    require 'factory_girl'
    FactoryGirl.find_definitions
</code></pre>


<p>go in the spec_helper.rb file. More precisely, <em>FactoryGirl.find_definitions</em> goes inside the <em>RSpec.configure do |config|</em> block.</p>

<p><em>But:</em> if you are using Spork, you need to reload Factory definitions at each run, otherwise you get a "factory not registered" error. So, place the following inside the <em>Spork.each_run do</em> block:</p>

<pre><code>
    Spork.each_run do
    # ....
        FactoryGirl.definition_file_paths << File.join(File.dirname(__FILE__), 'factories')
      FactoryGirl.find_definitions
    # etc...
</code></pre>


<p>There you go! Everything nicely configured :-) Also, you can use FactoryGirl in rails console! Just use the code <a href="http://blog.thefrontiergroup.com.au/2011/03/reloading-factory-girl-factories-in-the-rails-3-console/">in this post</a>, which I'll shamelessly copy here for posterity and for my own reference:</p>

<pre><code>
    ActionDispatch::Callbacks.after do
      # Reload the factories
      return unless (Rails.env.development? || Rails.env.test?)

      unless FactoryGirl.factories.blank? # first init will load factories, this should only run on subsequent reloads
        FactoryGirl.factories.clear
        FactoryGirl.find_definitions
      end
    end
</code></pre>


<p>You can also just run this code directly in the console. If you do have sequences defined, you'll need to add the following extra:</p>

<pre><code>
FactoryGirl.factories.clear
FactoryGirl.sequences.clear
FactoryGirl.find_definitions
</code></pre>


<p>(and if you are using <a href="http://robots.thoughtbot.com/post/23673635798/remove-duplication-with-factorygirls-traits">traits</a>, apparently you need to add FactoryGirl.traits.clear as well).</p>

<h2>In unit testing</h2>

<p>So first things first... You can have a file for testing factories but I'd rather have the test for the validity of the factory in the model test file itself -- this to avoid incurring errors when you are focusing on testing a particular model, all because your factory was ill-defined. So go ahead and test the factory itself:</p>

<pre><code>
    it "has a valid factory" do
        m = FactoryGirl.build(:my_model)
        m.should be_valid
    end
</code></pre>


<p>What do we do if this goes wrong and we can't sort out the error? Go to the console, write</p>

<pre><code>
m = FactoryGirl.build(:my_model)
m.valid?  # duh, it'll be false
m.save    # just to trigger all validations callbacks etc that we might have
m.errors
</code></pre>


<p>And now go ahead and complete your factory with the necessary information. Simple enough, right? The syntax for defining factories is explained pretty well <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">in the starting guide</a> so I won't go to the trouble, except for the case when we are using Faker.</p>

<h2>With Faker</h2>

<p>Faker is a cool gem for... you guessed it, generating fake data. And here's how you do it:</p>

<pre><code>
  factory :company do
    name { Faker::Company.name }
    phone {Faker::PhoneNumber.cell_phone}
  end
</code></pre>


<p>Yup, just a normal block, not too bad.</p>

<h2>Sequences</h2>

<p>Sequences are used for attributes that must be unique, such as email addresses. You can define sequences "outside" of the factory definition, or inside as a block:</p>

<pre><code>
  sequence :email do |n|
    "test#{n}@example.com"
  end

    factory :user do
        email
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    end
</code></pre>


<p>is the same as:</p>

<pre><code>
    factory :user do
        sequence(:email) { |n| "test#{n}@example.com"}
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    end
</code></pre>


<h2>Associations</h2>

<p>Associations in factories are simply created by adding the factory name for the association in the other factory block. For example, if my user has_one location:</p>

<pre><code>
    factory :user do
        sequence(:email) { |n| "test#{n}@example.com"}
    password "password"
    password_confirmation "password"
    phone {Faker::PhoneNumber.cell_phone}
    location   # ta-da!
    end
</code></pre>


<p>More detail about associations with FactoryGirl <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">here</a>.</p>

<p>More about this tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I test part III: Why rspec?]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/20/how-i-test-part-iii/"/>
    <updated>2012-12-20T16:48:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/20/how-i-test-part-iii</id>
    <content type="html"><![CDATA[<p>Why RSpec? That is a good question. My main reason for using RSpec right now is because I want to have a testing + documentation + TODO bundle, all in one, like a shampoo:</p>

<ul>
<li>testing -- ok, RSpec does make things a tad more complicated for testing. I believe that testing actually makes you learn more about what you code, and RSpec, being a DSL, can make things esoteric enough that sometimes you don't know exactly what you're testing (I confess that I like Test::Unit more because it's simpler for developers to read -- assert that this gives this result). But, on the other hand, you have shoulda! :-)</li>
<li>documentation -- the exact same thing that makes testing a bit more esoteric, makes documentation a piece of cake. You want to know how something works? Just read the tests. And RSpec does make that side of testing much clearer.</li>
<li>TODO -- yup, that's right. If you have features that you want to implement later on, just add a "pending" spec with the description of what you want to do. Of course that you can do that in Test::Unit as well, but it's not as beautiful and immediate as in RSpec.</li>
</ul>


<p>Of course that I'm really just beginning and I might change my mind eventually. <a href="http://www.rubyinside.com/dhh-offended-by-rspec-debate-4610.html">Even the creator of Rails argues against RSPec</a>, and there are quite a few arguments against it (if you missed the link, here's an <a href="http://objectreload.com/articles/2010/09/thoughts-on-testing-part-1.html">excellent blog post on that</a>).</p>

<p>By the way, I'm abiding by this rule from the last post:</p>

<p>"- Keep things flat — deeply nested contexts are ugly as they hinder readability of your test cases. Split your tests up into different files if they’re getting too long."</p>

<p>I was trying to make things DRY in the tests, and then I thought... why bother, exactly? It's better if they are more readable, for the sake of documentation as stated above. Amen, brothers.</p>

<h2>Why not Cucumber for request specs?</h2>

<p>All the reasons are in this <a href="http://epimetrics.com/entries/3129">excellent post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I test part II - testing models]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/19/how-i-test-part-ii/"/>
    <updated>2012-12-19T10:17:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/19/how-i-test-part-ii</id>
    <content type="html"><![CDATA[<h2>Testing models</h2>

<p>From <a href="http://guides.rubyonrails.org/testing.html">rails guides</a>:</p>

<p>"Ideally, you would like to include a test for everything which could possibly break. It’s a good practice to have at least one test for each of your validations and at least one test for every method in your model."</p>

<p>Which leads me to...</p>

<h2>Why I use shoulda</h2>

<p>I think that the best thing is just to take a peek at <a href="http://cheat.errtheblog.com/s/rspec_shoulda/">The shoulda cheat sheets</a>.</p>

<p>You actually get a guide of what to test by looking at the cheat sheet! It's too bad that it's not up to date (actually I think that the whole site is not up to date -- even the gem doesn't work anymore, which I think is too bad :-( )</p>

<p>Furthermore, it's great for lazy people and it's definitely easier on the eyes. Just check the following example:</p>

<p><div><script src='https://gist.github.com/4339197.js?file=shoulda_model.rb'></script>
<noscript><pre><code># without shoulda... tons of code :-)
it &quot;should belong to person&quot; do
	Model.reflect_on_association(:person).macro.should == :belongs_to
end

# with shoulda... one-liner!
it{should belong_to(:person)}
</code></pre></noscript></div>
</p>

<p>Convinced? ;-)</p>

<h2>What I test exactly with shoulda</h2>

<p>I go through the whole list of shoulda macros for models, and I just use and abuse them. Since the cheat sheet is not up to date, I created a new one (just for models for now) at:</p>

<p><div><script src='https://gist.github.com/4339490.js?file=shoulda_cheat_model.rb'></script>
<noscript><pre><code># updated from the original @ http://cheat.errtheblog.com/s/rspec_shoulda
# just a subset -- models -- is included here. I'll update this, and create cheat sheets for others, as I go along.
# I marked the ones I added with NEW and also added the links to the corresponding code, as I think it's useful.
# Any comments/corrections are welcome!

# =================  Data and Associations =======================
# https://github.com/thoughtbot/shoulda-matchers/tree/master/lib/shoulda/matchers/active_record

it { should_not have_db_column(:admin).of_type(:boolean) }
it { should have_db_column(:salary).
      of_type(:decimal).
      with_options(:precision =&gt; 10, :scale =&gt; 2) }
it { should have_readonly_attributes(:password) }
it { should belong_to(:parent) }
it { should have_db_index(:id) } # NEW

it { should have_many(:friends) }
it { should have_many(:enemies).through(:friends) }
it { should have_many(:enemies).dependent(:destroy) }

it { should have_one(:god) }

it { should have_and_belong_to_many(:posts) }

it {should accept_nested_attributes_for(:user)} # NEW

# ================== Validation Matchers ============================
# https://github.com/thoughtbot/shoulda-matchers/tree/master/lib/shoulda/matchers/active_model

it { should validate_uniqueness_of(:keyword) }
it { should validate_uniqueness_of(:keyword).with_message(/dup/) }
it { should validate_uniqueness_of(:email).scoped_to(:name) }
it { should validate_uniqueness_of(:email).
              scoped_to(:first_name, :last_name) }
it { should validate_uniqueness_of(:keyword).case_insensitive }

it { should validate_presence_of(:name) }
it { should validate_presence_of(:name).
              with_message(/is not optional/) }

it { should validate_numericality_of(:age) }

it { should validate_format_of(:name).
              with('12345').
              with_message(/is not optional/) }
it { should validate_format_of(:name).
              not_with('12D45').
              with_message(/is not optional/) }

it { should validate_acceptance_of(:eula) }

it { should ensure_length_of(:password).
              is_at_least(6).
              is_at_most(20) }
it { should ensure_length_of(:name).
              is_at_least(3).
              with_short_message(/not long enough/) }
it { should ensure_length_of(:ssn).
              is_equal_to(9).
              with_message(/is invalid/) }

it { should ensure_inclusion_of(:age).in_range(0..100) }
it { should_not allow_mass_assignment_of(:password) }
it { should allow_mass_assignment_of(:first_name) }
it { should validate_format_of(:first_name).with(&quot;Carl&quot;) }

it { should validate_confirmation_of(:password) } # NEW</code></pre></noscript></div>
</p>

<p>Yes, it's a bit tedious. But (1) you make sure that you are actually testing all these details, which is extremely useful when you are constantly refactoring your code, and (2) it's not that slow with the multiple cursors of Sublime Text 2. You just need to have a scaffold.</p>

<h2>What I test without shoulda</h2>

<p>Apart from model methods, is there that much to test without shoulda? I test:</p>

<ul>
<li>Any model methods, extensively</li>
<li>Callbacks, extremely extensively</li>
<li>Some validations - but just to make sure I coded them right. See more of this perspective in <a href="http://www.christopherbloom.com/2011/07/12/testing-model-validations-in-rspec-the-short-and-sweet-way/">Testing model validations in rspec the short and sweet way</a></li>
</ul>


<p>... and for now, that's about it.</p>

<h2>Regarding generating fake data</h2>

<p>Like I mentioned before, I do use FactoryGirl extensively. Maybe that means that <a href="http://blog.steveklabnik.com/posts/2012-07-14-why-i-don-t-like-factory_girl">my models are complicated</a>? I don't know, but for now, I am sort of using good sense and stuff. Let's see what happens. I do use <a href="http://faker.rubyforge.org">Faker</a> as well. Come to think about it, will do a post on that eventually.</p>

<h2>Random issues in testing models</h2>

<p>When everything seems to be absolutely correct in the models and in the tests and you are still getting unexplainable errors, do restart guard. I already spent several hours messing around with the tests because guard didn't refresh the models. <a href="http://stackoverflow.com/questions/5855587/spork-is-really-great-but-how-can-i-get-it-to-refresh-validations-and-other-cod">There are automatic solutions</a>, but I didn't feel like hacking away the spork/guard configurations again... yet.</p>

<h2>Random resources</h2>

<ul>
<li><p><a href="http://everydayrails.com/2012/03/19/testing-series-rspec-models-factory-girl.html">Everyday Rails: How I learned to test my Rails applications, Part 3: Model specs</a> - this has a very nice overview of the actual steps required to test models. Now I just cheat using shoulda, but it's very nice and useful to get a</p></li>
<li><p><a href="http://www.christopherbloom.com/2011/07/12/testing-model-validations-in-rspec-the-short-and-sweet-way/">Testing model validations in rspec the short and sweet way</a> - it's a bit outdated, but describes how to test validations in a short way.</p></li>
</ul>


<hr />

<p>Again, as I already mentioned, I am a beginner to rails and, consequently, in testing rails, so I might be doing/saying terribly wrong things. Any input is very much appreciated :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I test - Part I: Environment]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/how-i-test/"/>
    <updated>2012-12-14T11:43:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/how-i-test</id>
    <content type="html"><![CDATA[<p>Not that I am an authority in testing... this is just a compilation of the so-called "best practices" that I've been seeing around, as well as some extra tips from my (very limited) experience. I'd love to hear the feedback from more experienced people... I'm going to do several of these as I go along.</p>

<h2>Gems I use</h2>

<p>I test using <a href="http://rspec.info">rspec</a> and <a href="https://github.com/thoughtbot/shoulda">shoulda</a>, which dramatically reduces the size of the tests. But beware -- rspec is a DSL, and I think that I only got a bit more intuition on what I was exactly testing after doing some tests in Test::Unit. I also use <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> for setting up the test data, instead of fixtures. Last but not least, the <a href="https://github.com/colszowka/simplecov">simplecov</a> gem is amazing, and although you shouldn't rely on it to determine when to stop testing, it really is good to get a (very precise) sense of what's covered and what's not in their beautiful html reports.</p>

<h2>General tips</h2>

<p>When all your tests are red for no apparent reason, it's because you were messing around with the db and then forgot to do</p>

<pre><code>rake db:test:clone</code></pre>


<p>Yup, the reason I am mentioning it here even though it seems completely obvious is because I am distracted and do that a lot... :-)</p>

<h2>Tips for running guard/spork in vagrant</h2>

<p>I use vagrant to keep my environment all neatly in one place. However, there are downsides. When running guard inside the guest OS, use</p>

<pre><code>bundle exec guard -p</code></pre>


<p>Otherwise, guard won't detect changes in the guest filesystem.</p>

<h2>FactoryGirl tips</h2>

<p>You can keep all factories in one file, for me that is more intuitive (and also, I don't have to keep opening files while I'm testing, it's all in one place.)</p>

<p>To try FactoryGirl methods in the console, run:</p>

<pre><code>FactoryGirl.find_definitions</code></pre>


<p>At least in my case, I would get a <a href="http://stackoverflow.com/questions/8409787/factorygirl-factory-not-registered-user-argumenterror">factory not registered</a> error when I didn't do that.</p>

<h2>Better Errors</h2>

<p>Not exactly related to testing, but <a href="https://github.com/charliesome/better_errors">this gem</a> has been a life changer! When there is an error, the standard error page gets replaced by a much better and useful error page, which has a full trace, the local and instance variables that are set at the time, and a terminal that you can use to inspect and make changes to the variables in the models and controllers in real time (or code whatever you want). I know I already mentioned it in another post, but I can't stress enough how cool this gem is!</p>

<p>In the next posts, I'll give an overview of how I test the models and controllers, which I only started testing this week!</p>
]]></content>
  </entry>
  
</feed>
