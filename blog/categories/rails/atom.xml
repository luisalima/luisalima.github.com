<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2012-12-14T10:00:23+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rack protection - another cool gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem/"/>
    <updated>2012-12-13T14:01:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem</id>
    <content type="html"><![CDATA[<p>This one I haven't evaluated yet, but looks promising: <a href="http://rkh.github.com/rack-protection/">Rack Protection</a>, to prevent typical web attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery">cross site request forgery</a>, <a href="https://www.owasp.org/index.php/Cross_site_scripting">cross site scripting</a>, <a href="https://www.owasp.org/index.php/Clickjacking">clickjacking</a>, directory traversal, <a href="https://www.owasp.org/index.php/Session_hijacking_attack">session hijacking</a> and IP spoofing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better errors gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/better-errors-gem/"/>
    <updated>2012-12-13T11:29:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/better-errors-gem</id>
    <content type="html"><![CDATA[<p>Yes, today I am in "documentation" mode, which means "bloggation" mode :-)</p>

<p>Just installed this gem -- <a href="https://github.com/charliesome/better_errors">Better errors</a>. It is a gem meant to help you out in development mode that replaces the standard Rails error page with a wayyyy better and more useful error page, featuring full stack trace, source code inspection for all stack frames, local and instance variable inspection, etc.</p>

<p>I'm going to try it out today, but definitely beats the time spent looking at development logs (even if they are as clean and contained as mine after doing the changes described in <a href="/blog/2012/12/13/disabling-nagging-logs-in-rails">this post</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding automatic code reloading to rails console]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console/"/>
    <updated>2012-12-13T10:56:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console</id>
    <content type="html"><![CDATA[<p>So I have no idea why the rails console in development mode doesn't already do this, since the whole idea of the console in development mode is for us to mess around and test random stuff in development mode, right? Anyway, I got inspired and helped by <a href="http://jkfill.com/">Jkfill</a> with his post on <a href="http://jkfill.com/2012/12/08/automatic-code-reloading-in-rails-console">Automatic Code Reloading in Rails Console</a>, so here goes, more for my records than yours since you should follow the instructions in his post. I am using Rails 3.2.9, so I had to copy the code from the <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/console/app.rb#L25">reload! method in the rails console code</a>, which is not exactly the best practice, but it's just for dev mode and it works :-)</p>

<pre><code> #this should be in config/initializers/irb_reloading.rb
    if defined?(IRB::Context) && !defined?(Rails::Server) && Rails.env.development?

  class IRB::Context
    def evaluate_with_reloading(line, line_no)

        ActionDispatch::Reloader.cleanup!
      ActionDispatch::Reloader.prepare!
      evaluate_without_reloading(line, line_no)
    end
    alias_method_chain :evaluate, :reloading
  end

  puts "=> IRB code reloading enabled"
end
</code></pre>


<p>In the meanwhile, shortly browsed the code at <a href="https://github.com/rails">the Rails gihub project</a> and it's really a nice way to learn more about rails... must do it more often.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silencing nagging logs in rails]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/disabling-nagging-logs-in-rails/"/>
    <updated>2012-12-13T10:20:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/disabling-nagging-logs-in-rails</id>
    <content type="html"><![CDATA[<p>Once upon a time, I was trying to do some meaningful debugging in rails with</p>

<pre><code> logger.debug </code></pre>


<p>and I was being particularly nagged by these annoying messages from Webrick:</p>

<pre><code> WARN Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true [closed]
</code></pre>


<p>The way to solve this? I am using 'thin' instead of Webrick as a development server (yeah, I know that there are <a href="https://bugs.ruby-lang.org/attachments/2300/204_304_keep_alive.patch">patches to solve this in Webrick</a> but I decided to go a bit aggressive instead).</p>

<p>And another thing that nagged me were the asset pipeline messages with the gets for the css, js, images, etc. So one way to shut Sprockets up is given <a href="http://stackoverflow.com/questions/6312448/how-to-disable-logging-of-asset-pipeline-sprockets-messages-in-rails-3-1">here</a>, and just for the record:</p>

<pre><code> # place this code in config/initializers/quiet_assets.rb
    if Rails.env.development?
  Rails.application.assets.logger = Logger.new('/dev/null')
  Rails::Rack::Logger.class_eval do
    def call_with_quiet_assets(env)
      previous_level = Rails.logger.level
      Rails.logger.level = Logger::ERROR if env['PATH_INFO'] =~ %r{^/assets/}
      call_without_quiet_assets(env)
    ensure
      Rails.logger.level = previous_level
    end
    alias_method_chain :call, :quiet_assets
  end
end
</code></pre>


<p>Ahhhhh now I can actually see <strong>meaningful</strong> logs in my development log. <em>whew!</em></p>
]]></content>
  </entry>
  
</feed>
