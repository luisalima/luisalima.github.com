<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2012-12-19T10:09:58+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analytics js & a mash of interesting rails stuff]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/analytics-js/"/>
    <updated>2012-12-14T13:34:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/analytics-js</id>
    <content type="html"><![CDATA[<h2>Analytics.js</h2>

<p>I don't know whether this library is very common, but it definitely shows a lot of promise:</p>

<p><a href="http://segmentio.github.com/analytics.js/">Segmentio's Analytics.js</a></p>

<p>It provides provider-agnostic hooks to route to analytics services. They also have a hosted version where the analytics services can be changed without touching the code. Looks really clean and neat.</p>

<h2>Nice video: to_proc</h2>

<p><a href="http://www.youtube.com/watch?v=aISNtCAZlMg">This video by CooperPress</a> explains in a very clear fashion how to use the "to_proc" feature of Ruby (and understand some weird code you might come across). It is also well worth it to subscribe to <a href="http://www.youtube.com/user/CooperPress?feature=watch">their other videos</a>.</p>

<h2>Faster Rails partial rendering and caching</h2>

<p>I sure will try out <a href="http://ninjasandrobots.com/rails-faster-partial-rendering-and-caching/">this gem (multi_fetch_fragments)</a> to optimize Rails when I get to that point of my work...</p>

<h2>Indexes in Rails databases</h2>

<p><a href="http://tomafro.net/2009/08/using-indexes-in-rails-index-your-associations">Extremely good article by Tom Ward on using indexes in rails associations</a>. An excellent guide to determine what indexes your app should include (no more, no less).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails tip #2 - less Rspec in more color]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color/"/>
    <updated>2012-12-14T11:04:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color</id>
    <content type="html"><![CDATA[<p>I usually have Guard running in the background with Spork, but when I'm writing tests I like to do it the old fashioned way and be able to do rspec some_test | less. The problem with that approach is that we get a monochrome version of our tests. In order to redirect the color in the pipe, edit spec_helper and add the following:</p>

<pre><code> # spec/spec_helper.rb
Rspec.configure do |config|
    config.tty = true
    config.color_enabled = true
    # ... whatever configurations you might have here...
end
</code></pre>


<p>And enjoy a more colorful life ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails tip #1 - environment variables]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables/"/>
    <updated>2012-12-14T10:24:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables</id>
    <content type="html"><![CDATA[<p>This isn't exactly my tip (well, since this is a learning / work in progress blog, none of them are), but when an article is already as comprehensive as this one, there's nothing left to say except:</p>

<p><a href="http://railsapps.github.com/rails-environment-variables.html">Here's a very nice article on the options for setting environment variables in Rails</a></p>

<p>Why would you want to set environment variables in rails? There are some examples in the article, but for instance, setting passwords to access services. They should not be in any file (nor tracked in git), so that other people cannot access them. One way is to set Unix environment variables, the other way -- which actually sounds like a "cleaner way" of organizing things -- is to set them from Rails itself by taking the values from a yaml file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack protection - another cool gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem/"/>
    <updated>2012-12-13T14:01:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem</id>
    <content type="html"><![CDATA[<p>This one I haven't evaluated yet, but looks promising: <a href="http://rkh.github.com/rack-protection/">Rack Protection</a>, to prevent typical web attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery">cross site request forgery</a>, <a href="https://www.owasp.org/index.php/Cross_site_scripting">cross site scripting</a>, <a href="https://www.owasp.org/index.php/Clickjacking">clickjacking</a>, directory traversal, <a href="https://www.owasp.org/index.php/Session_hijacking_attack">session hijacking</a> and IP spoofing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better errors gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/better-errors-gem/"/>
    <updated>2012-12-13T11:29:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/better-errors-gem</id>
    <content type="html"><![CDATA[<p>Yes, today I am in "documentation" mode, which means "bloggation" mode :-)</p>

<p>Just installed this gem -- <a href="https://github.com/charliesome/better_errors">Better errors</a>. It is a gem meant to help you out in development mode that replaces the standard Rails error page with a wayyyy better and more useful error page, featuring full stack trace, source code inspection for all stack frames, local and instance variable inspection, etc.</p>

<p>I'm going to try it out today, but definitely beats the time spent looking at development logs (even if they are as clean and contained as mine after doing the changes described in <a href="/blog/2012/12/13/disabling-nagging-logs-in-rails">this post</a>).</p>
]]></content>
  </entry>
  
</feed>
