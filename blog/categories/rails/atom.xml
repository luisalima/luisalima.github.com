<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Entreprevelopment adventures]]></title>
  <link href="http://luisalima.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://luisalima.github.com/"/>
  <updated>2012-12-14T11:14:31+00:00</updated>
  <id>http://luisalima.github.com/</id>
  <author>
    <name><![CDATA[Luisa Lima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails tip #2 - less Rspec in more color]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color/"/>
    <updated>2012-12-14T11:04:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-2-less-rspec-in-color</id>
    <content type="html"><![CDATA[<p>I usually have Guard running in the background with Spork, but when I'm writing tests I like to do it the old fashioned way and be able to do rspec some_test | less. The problem with that approach is that we get a monochrome version of our tests. In order to redirect the color in the pipe, edit spec_helper and add the following:</p>

<pre><code> # spec/spec_helper.rb
Rspec.configure do |config|
    config.tty = true
    config.color_enabled = true
    # ... whatever configurations you might have here...
end
</code></pre>


<p>And enjoy a more colorful life ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails tip #1 - environment variables]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables/"/>
    <updated>2012-12-14T10:24:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/14/rails-tip-number-1-environment-variables</id>
    <content type="html"><![CDATA[<p>This isn't exactly my tip (well, since this is a learning / work in progress blog, none of them are), but when an article is already as comprehensive as this one, there's nothing left to say except:</p>

<p><a href="http://railsapps.github.com/rails-environment-variables.html">Here's a very nice article on the options for setting environment variables in Rails</a></p>

<p>Why would you want to set environment variables in rails? There are some examples in the article, but for instance, setting passwords to access services. They should not be in any file (nor tracked in git), so that other people cannot access them. One way is to set Unix environment variables, the other way -- which actually sounds like a "cleaner way" of organizing things -- is to set them from Rails itself by taking the values from a yaml file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack protection - another cool gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem/"/>
    <updated>2012-12-13T14:01:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/rack-protection-another-cool-gem</id>
    <content type="html"><![CDATA[<p>This one I haven't evaluated yet, but looks promising: <a href="http://rkh.github.com/rack-protection/">Rack Protection</a>, to prevent typical web attacks such as <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery">cross site request forgery</a>, <a href="https://www.owasp.org/index.php/Cross_site_scripting">cross site scripting</a>, <a href="https://www.owasp.org/index.php/Clickjacking">clickjacking</a>, directory traversal, <a href="https://www.owasp.org/index.php/Session_hijacking_attack">session hijacking</a> and IP spoofing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better errors gem]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/better-errors-gem/"/>
    <updated>2012-12-13T11:29:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/better-errors-gem</id>
    <content type="html"><![CDATA[<p>Yes, today I am in "documentation" mode, which means "bloggation" mode :-)</p>

<p>Just installed this gem -- <a href="https://github.com/charliesome/better_errors">Better errors</a>. It is a gem meant to help you out in development mode that replaces the standard Rails error page with a wayyyy better and more useful error page, featuring full stack trace, source code inspection for all stack frames, local and instance variable inspection, etc.</p>

<p>I'm going to try it out today, but definitely beats the time spent looking at development logs (even if they are as clean and contained as mine after doing the changes described in <a href="/blog/2012/12/13/disabling-nagging-logs-in-rails">this post</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding automatic code reloading to rails console]]></title>
    <link href="http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console/"/>
    <updated>2012-12-13T10:56:00+00:00</updated>
    <id>http://luisalima.github.com/blog/2012/12/13/adding-automatic-code-reloading-in-rails-console</id>
    <content type="html"><![CDATA[<p>So I have no idea why the rails console in development mode doesn't already do this, since the whole idea of the console in development mode is for us to mess around and test random stuff in development mode, right? Anyway, I got inspired and helped by <a href="http://jkfill.com/">Jkfill</a> with his post on <a href="http://jkfill.com/2012/12/08/automatic-code-reloading-in-rails-console">Automatic Code Reloading in Rails Console</a>, so here goes, more for my records than yours since you should follow the instructions in his post. I am using Rails 3.2.9, so I had to copy the code from the <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/console/app.rb#L25">reload! method in the rails console code</a>, which is not exactly the best practice, but it's just for dev mode and it works :-)</p>

<pre><code> #this should be in config/initializers/irb_reloading.rb
    if defined?(IRB::Context) && !defined?(Rails::Server) && Rails.env.development?

  class IRB::Context
    def evaluate_with_reloading(line, line_no)

        ActionDispatch::Reloader.cleanup!
      ActionDispatch::Reloader.prepare!
      evaluate_without_reloading(line, line_no)
    end
    alias_method_chain :evaluate, :reloading
  end

  puts "=> IRB code reloading enabled"
end
</code></pre>


<p>In the meanwhile, shortly browsed the code at <a href="https://github.com/rails">the Rails gihub project</a> and it's really a nice way to learn more about rails... must do it more often.</p>
]]></content>
  </entry>
  
</feed>
